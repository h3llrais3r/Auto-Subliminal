{"version":3,"file":"common.b5658ddb970a258a.js","mappings":"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","sources":["./src/app/core/services/api/settings.service.ts","./src/app/shared/models/settings.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appSettings } from '../../../app-settings.service';\r\nimport { GeneralSettings, LibrarySettings, LogSettings, NameMappingSettings, NotificationSettings, PostProcessSettings, SkipMappingSettings, SubliminalSettings, TwitterAuthorization, TwitterRegistration, WebServerSettings } from '../../../shared/models/settings';\r\nimport { ApiServiceTemplate } from './api-service-template';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SettingsService extends ApiServiceTemplate {\r\n\r\n  private readonly URL = `${appSettings.webRoot}/api/settings`;\r\n\r\n  // General settings\r\n\r\n  getGeneralSettings(): Observable<GeneralSettings> {\r\n    return this.httpClient.get<GeneralSettings>(`${this.URL}/general`, this.options)\r\n      .pipe(map((settings) => new GeneralSettings(settings)));\r\n  }\r\n\r\n  updateGeneralSettings(generalSettings: GeneralSettings): Observable<boolean> {\r\n    return this.httpClient.put<GeneralSettings>(`${this.URL}/general`, JSON.stringify(generalSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  updateGeneralSetting(settingName: string, value: any): Observable<boolean> {\r\n    return this.httpClient.patch<void>(`${this.URL}/general/${settingName}`, JSON.stringify(value), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Library settings\r\n\r\n  getLibrarySettings(): Observable<LibrarySettings> {\r\n    return this.httpClient.get<LibrarySettings>(`${this.URL}/library`, this.options)\r\n      .pipe(map((settings) => new LibrarySettings(settings)));\r\n  }\r\n\r\n  updateLibrarySettings(librarySettings: LibrarySettings): Observable<boolean> {\r\n    return this.httpClient.put<LibrarySettings>(`${this.URL}/library`, JSON.stringify(librarySettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Log settings\r\n\r\n  getLogSettings(): Observable<LogSettings> {\r\n    return this.httpClient.get<LogSettings>(`${this.URL}/logging`, this.options)\r\n      .pipe(map((settings) => new LogSettings(settings)));\r\n  }\r\n\r\n  updateLogSettings(logSettings: LogSettings): Observable<boolean> {\r\n    return this.httpClient.put<LogSettings>(`${this.URL}/logging`, JSON.stringify(logSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // WebServer settings\r\n\r\n  getWebServerSettings(): Observable<WebServerSettings> {\r\n    return this.httpClient.get<WebServerSettings>(`${this.URL}/webserver`, this.options)\r\n      .pipe(map((settings) => new WebServerSettings(settings)));\r\n  }\r\n\r\n  updateWebServerSettings(webServerSettings: WebServerSettings): Observable<boolean> {\r\n    return this.httpClient.put<WebServerSettings>(`${this.URL}/webserver`, JSON.stringify(webServerSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Subliminal settings\r\n\r\n  getSubliminalSettings(): Observable<SubliminalSettings> {\r\n    return this.httpClient.get<SubliminalSettings>(`${this.URL}/subliminal`, this.options)\r\n      .pipe(map((settings) => new SubliminalSettings(settings)));\r\n  }\r\n\r\n  updateSubliminalSettings(subliminalSettings: SubliminalSettings): Observable<boolean> {\r\n    return this.httpClient.put<SubliminalSettings>(`${this.URL}/subliminal`, JSON.stringify(subliminalSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // NameMapping settings\r\n\r\n  getNameMappingSettings(): Observable<NameMappingSettings> {\r\n    return this.httpClient.get<NameMappingSettings>(`${this.URL}/namemapping`, this.options)\r\n      .pipe(map((settings) => new NameMappingSettings(settings)));\r\n  }\r\n\r\n  updateNameMappingSettings(nameMappingSettings: NameMappingSettings): Observable<boolean> {\r\n    return this.httpClient.put<NameMappingSettings>(`${this.URL}/namemapping`, JSON.stringify(nameMappingSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // SkipMapping settings\r\n\r\n  getSkipMappingSettings(): Observable<SkipMappingSettings> {\r\n    return this.httpClient.get<SkipMappingSettings>(`${this.URL}/skipmapping`, this.options)\r\n      .pipe(map((settings) => new SkipMappingSettings(settings)));\r\n  }\r\n\r\n  updateSkipMappingSettings(skipMappingSettings: SkipMappingSettings): Observable<boolean> {\r\n    return this.httpClient.put<SkipMappingSettings>(`${this.URL}/skipmapping`, JSON.stringify(skipMappingSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Notification settings\r\n\r\n  getNotificationSettings(): Observable<NotificationSettings> {\r\n    return this.httpClient.get<NotificationSettings>(`${this.URL}/notification`, this.options)\r\n      .pipe(map((settings) => new NotificationSettings(settings)));\r\n  }\r\n\r\n  updateNotificationSettings(notificationSettings: NotificationSettings): Observable<boolean> {\r\n    return this.httpClient.put<NotificationSettings>(`${this.URL}/notification`, JSON.stringify(notificationSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  testNotifier(notifierName: string): Observable<boolean> {\r\n    return this.httpClient.patch<void>(`${this.URL}/notification/${notifierName}`, {}, this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  registerTwitter(): Observable<TwitterRegistration> {\r\n    return this.httpClient.post<TwitterRegistration>(`${this.URL}/notification/twitter`, {}, this.options)\r\n      .pipe(map((twitterRegistration) => new TwitterRegistration(twitterRegistration)));\r\n  }\r\n\r\n  authorizeTwitter(twitterRegistration: TwitterRegistration): Observable<TwitterAuthorization> {\r\n    return this.httpClient.post<any>(`${this.URL}/notification/twitter`, twitterRegistration, this.options)\r\n      .pipe(map((twitterAuthorization) => new TwitterAuthorization(twitterAuthorization)));\r\n  }\r\n\r\n  // PostProcess settings\r\n\r\n  getPostProcessSettings(): Observable<PostProcessSettings> {\r\n    return this.httpClient.get<PostProcessSettings>(`${this.URL}/postprocessing`, this.options)\r\n      .pipe(map((settings) => new PostProcessSettings(settings)));\r\n  }\r\n\r\n  updatePostProcessSettings(postProcessSettings: PostProcessSettings): Observable<boolean> {\r\n    return this.httpClient.put<PostProcessSettings>(`${this.URL}/postprocessing`, JSON.stringify(postProcessSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n}\r\n","export class GeneralSettings {\r\n  videoPaths: string[];\r\n  defaultLanguage: string;\r\n  defaultLanguageSuffix: string;\r\n  additionalLanguages: string[];\r\n  manualSearchWithScoring: boolean;\r\n  scanDiskInterval: number;\r\n  scanDiskAtStartup: boolean;\r\n  checkSubInterval: number;\r\n  checkSubAtStartup: boolean;\r\n  checkSubDeadline: number;\r\n  checkSubDelta: number;\r\n  checkVersionInterval: number;\r\n  checkVersionAtStartup: boolean;\r\n  checkVersionAutoUpdate: boolean;\r\n  scanEmbeddedSubs: boolean;\r\n  scanHardcodedSubs: boolean;\r\n  skipHiddenDirs: boolean;\r\n  detectInvalidSubLanguage: boolean;\r\n  detectedLanguageProbability: number;\r\n  manualSubSync: boolean;\r\n  ffmpegPath: string;\r\n  minVideoFileSize: number;\r\n  maxDbResults: number;\r\n  timestampFormat: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class LibrarySettings {\r\n  libraryMode: boolean;\r\n  libraryPaths: string[];\r\n  scanLibraryInterval: number;\r\n  scanLibraryAtStartup: boolean;\r\n  libraryEditMode: boolean;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class LogSettings {\r\n  logFile: string;\r\n  logLevel: number;\r\n  logNum: number;\r\n  logSize: number;\r\n  logHttpAccess: boolean;\r\n  logExternalLibs: boolean;\r\n  logDetailedFormat: boolean;\r\n  logReversed: boolean;\r\n  logLevelConsole: number;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class WebServerSettings {\r\n  webServerIp: string;\r\n  webServerPort: number;\r\n  webRoot: string;\r\n  userName: string;\r\n  password: string;\r\n  launchBrowser: boolean;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class SubliminalSettings {\r\n  showMatchSource: boolean;\r\n  showMatchQuality: boolean;\r\n  showMatchCodec: boolean;\r\n  showMatchReleaseGroup: boolean;\r\n  movieMatchSource: boolean;\r\n  movieMatchQuality: boolean;\r\n  movieMatchCodec: boolean;\r\n  movieMatchReleaseGroup: boolean;\r\n  subliminalProviders: string[];\r\n  subtitleUtf8Encoding: boolean;\r\n  refineVideo: boolean;\r\n  manualRefineVideo: boolean;\r\n  preferHearingImpaired: boolean;\r\n  antiCaptchaClass: string;\r\n  antiCaptchaClientKey: string;\r\n  addic7edUserName: string;\r\n  addic7edPassword: string;\r\n  addic7edUserId: string;\r\n  opensubtitlesUserName: string;\r\n  opensubtitlesPassword: string;\r\n  legendastvUserName: string;\r\n  legendastvPassword: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class NameMappingSettings {\r\n  showNameMapping: string[];\r\n  addic7edShowNameMapping: string[];\r\n  alternativeShowNameMapping: string[];\r\n  movieNameMapping: string[];\r\n  alternativeMovieNameMapping: string[];\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class SkipMappingSettings {\r\n  skipShowMapping: string[];\r\n  skipMovieMapping: string[];\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class NotificationSettings {\r\n  notify: boolean;\r\n  notifyMail: boolean;\r\n  mailServer: string;\r\n  mailFromName: string;\r\n  mailFrom: string;\r\n  mailTo: string;\r\n  mailUserName: string;\r\n  mailPassword: string;\r\n  mailSubject: string;\r\n  mailEncryption: string;\r\n  mailAuthentication: string;\r\n  notifyTwitter: boolean;\r\n  twitterKey: string;\r\n  twitterSecret: string;\r\n  notifyPushalot: boolean;\r\n  pushalotApi: string;\r\n  notifyPushover: boolean;\r\n  pushoverKey: string;\r\n  pushoverApi: string;\r\n  pushoverDevices: string;\r\n  notifyGrowl: boolean;\r\n  growlHost: string;\r\n  growlPort: number;\r\n  growlPassword: string;\r\n  growlPriority: number;\r\n  notifyProwl: boolean;\r\n  prowlApi: string;\r\n  prowlPriority: number;\r\n  notifyPushbullet: boolean;\r\n  pushbulletApi: string;\r\n  notifyTelegram: boolean;\r\n  telegramBotApi: string;\r\n  telegramChatId: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class TwitterRegistration {\r\n  url: string;\r\n  tokenKey: string;\r\n  tokenSecret: string;\r\n  tokenPin?: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class TwitterAuthorization {\r\n  twitterKey: string;\r\n  twitterSecret: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class PostProcessSettings {\r\n  postProcess: boolean;\r\n  postProcessIndividual: boolean;\r\n  postProcessUtf8Encoding: boolean;\r\n  showPostProcessCmd: string;\r\n  showPostProcessArgs: string;\r\n  moviePostProcessCmd: string;\r\n  moviePostProcessArgs: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n"],"names":["map","appSettings","GeneralSettings","LibrarySettings","LogSettings","NameMappingSettings","NotificationSettings","PostProcessSettings","SkipMappingSettings","SubliminalSettings","TwitterAuthorization","TwitterRegistration","WebServerSettings","ApiServiceTemplate","SettingsService","constructor","URL","webRoot","getGeneralSettings","httpClient","get","options","pipe","settings","updateGeneralSettings","generalSettings","put","JSON","stringify","updateGeneralSetting","settingName","value","patch","getLibrarySettings","updateLibrarySettings","librarySettings","getLogSettings","updateLogSettings","logSettings","getWebServerSettings","updateWebServerSettings","webServerSettings","getSubliminalSettings","updateSubliminalSettings","subliminalSettings","getNameMappingSettings","updateNameMappingSettings","nameMappingSettings","getSkipMappingSettings","updateSkipMappingSettings","skipMappingSettings","getNotificationSettings","updateNotificationSettings","notificationSettings","testNotifier","notifierName","registerTwitter","post","twitterRegistration","authorizeTwitter","twitterAuthorization","getPostProcessSettings","updatePostProcessSettings","postProcessSettings","t","factory","ɵfac","providedIn","obj","Object","assign"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}