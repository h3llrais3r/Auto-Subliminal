{"version":3,"file":"710.34d7bede01123c89.js","mappings":"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","sources":["./src/app/core/services/api/log.service.ts","./src/app/modules/log/clear/log-clear.component.ts","./src/app/modules/log/log-routing.module.ts","./src/app/modules/log/log.module.ts","./src/app/modules/log/view/log-view.component.ts","./src/app/modules/log/view/log-view.component.html","./src/app/shared/models/loglevel.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appSettings } from '../../../app-settings.service';\r\nimport { ApiServiceTemplate } from './api-service-template';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LogService extends ApiServiceTemplate {\r\n\r\n  private readonly URL = `${appSettings.webRoot}/api/logs`;\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    super(httpClient);\r\n  }\r\n\r\n  getLogs(lognum?: number): Observable<string[]> {\r\n    const url = lognum ? `${this.URL}/${lognum}` : this.URL;\r\n    return this.httpClient.get<string[]>(url, this.options);\r\n  }\r\n\r\n  clearLogs(): Observable<boolean> {\r\n    return this.httpClient.delete<void>(this.URL, this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  getLogCount(): Observable<number> {\r\n    return this.httpClient.get<Count>(`${this.URL}/count`, this.options)\r\n      .pipe(map((count) => count.count));\r\n  }\r\n}\r\n\r\ntype Count = { count: number };\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LogService } from '../../../core/services/api/log.service';\r\nimport { MessageService } from '../../../core/services/message.service';\r\n\r\n@Component({\r\n  selector: 'app-log-clear',\r\n  templateUrl: './log-clear.component.html',\r\n  styleUrls: ['./log-clear.component.scss']\r\n})\r\nexport class LogClearComponent implements OnInit {\r\n\r\n  constructor(private router: Router, private logService: LogService, private messageService: MessageService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.logService.clearLogs().subscribe(\r\n      (result) => {\r\n        // Redirect to log view after the logs are cleared\r\n        if (result) {\r\n          this.router.navigateByUrl('/log/view');\r\n        }\r\n      },\r\n      () => this.messageService.showErrorMessage(`Unable to clear the logs!`)\r\n    );\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LogClearComponent } from './clear/log-clear.component';\r\nimport { LogViewComponent } from './view/log-view.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'view',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'view',\r\n    component: LogViewComponent\r\n  },\r\n  {\r\n    path: 'clear',\r\n    component: LogClearComponent\r\n  },\r\n  {\r\n    path: '**', // wildcard to match any non matching routes\r\n    redirectTo: 'view'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LogRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { LogRoutingModule } from './log-routing.module';\r\nimport { LogViewComponent } from './view/log-view.component';\r\nimport { LogClearComponent } from './clear/log-clear.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LogViewComponent,\r\n    LogClearComponent\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    LogRoutingModule\r\n  ]\r\n})\r\nexport class LogModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { SelectItem } from 'primeng/api';\r\nimport { webSocket, WebSocketSubject, WebSocketSubjectConfig } from 'rxjs/webSocket';\r\nimport { appSettings } from '../../../app-settings.service';\r\nimport { LogService } from '../../../core/services/api/log.service';\r\nimport { MessageService } from '../../../core/services/message.service';\r\nimport { ScrollService } from '../../../core/services/scroll.service';\r\nimport { Loglevel } from '../../../shared/models/loglevel';\r\n\r\n@Component({\r\n  selector: 'app-log-view',\r\n  templateUrl: './log-view.component.html',\r\n  styleUrls: ['./log-view.component.scss']\r\n})\r\nexport class LogViewComponent implements OnInit {\r\n\r\n  private readonly LOG_MESSAGE_REGEX = /^((?<date>\\d{4}\\-\\d{2}\\-\\d{2})\\s(?<time>\\d{2}:\\d{2}:\\d{2},\\d{3})\\s(?<loglevel>\\w+))/;\r\n\r\n  logNums: number[];\r\n  selectedLogNum = 0;\r\n  loglevels: SelectItem[];\r\n  selectedLoglevel = '';\r\n  loading = false;\r\n  tailing = false;\r\n  tailingDisabled = false; // true for non current (lognum != 0) logfiles as tailing has no use in this case\r\n  tailButtonLabel = 'Start tailing';\r\n  tailButtonIcon = 'pi pi-play';\r\n\r\n  private logWebsocket: WebSocketSubject<string>;\r\n  private logMessages: string[] = [];\r\n\r\n  constructor(private logService: LogService, private messageService: MessageService, private scrollService: ScrollService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loglevels = this.getLogLevels();\r\n    this.logService.getLogCount().subscribe((count) => this.logNums = Array.from(Array(count).keys()).map((i) => i + 1)); // get array starting from 1\r\n    this.getLogs(0); // 0 = current logfile\r\n  }\r\n\r\n  getLogs(logNum: number): void {\r\n    this.loading = true;\r\n    this.selectedLogNum = logNum;\r\n    this.tailingDisabled = this.selectedLogNum !== 0; // tailing only allowed when on current logfile -> lognum = 0\r\n    this.logService.getLogs(logNum).subscribe(\r\n      (logLines) => {\r\n        this.logMessages = logLines;\r\n        this.loading = false;\r\n        this.handleLogTailing();\r\n      },\r\n      () => this.messageService.showErrorMessage('Unable to get the logs!')\r\n    );\r\n  }\r\n\r\n  toggleTailing(): void {\r\n    this.tailing = !this.tailing;\r\n    if (this.tailing) {\r\n      // Change button label\r\n      this.tailButtonLabel = 'Stop tailing';\r\n      this.tailButtonIcon = 'pi pi-pause';\r\n      // Scroll to right position when tailing is enabled\r\n      if (appSettings.logReversed) {\r\n        this.scrollService.triggerScrollUp();\r\n      } else {\r\n        this.scrollService.triggerScrollDown();\r\n      }\r\n    } else {\r\n      // Change button label\r\n      this.tailButtonLabel = 'Start tailing';\r\n      this.tailButtonIcon = 'pi pi-play';\r\n    }\r\n    this.handleLogTailing();\r\n  }\r\n\r\n  get filteredLogMessages(): string[] {\r\n    return this.logMessages.filter((logMessage) => {\r\n      if (this.selectedLoglevel) {\r\n        const match = this.LOG_MESSAGE_REGEX.exec(logMessage);\r\n        return match && match.groups.loglevel === this.selectedLoglevel;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  get logContent(): string {\r\n    return this.filteredLogMessages.join('\\n');\r\n  }\r\n\r\n  private getLogLevels(): SelectItem[] {\r\n    const logLevels: SelectItem[] = [];\r\n    logLevels.push({ label: 'ALL', value: '' });\r\n    Object.entries(Loglevel).forEach((entry) => logLevels.push({ label: entry[0], value: entry[1] }));\r\n    return logLevels;\r\n  }\r\n\r\n  private createLogWebSocket(): WebSocketSubject<string> {\r\n    let protocol = 'ws:';\r\n    if (window.location.protocol === 'https:') {\r\n      protocol = 'wss:';\r\n    }\r\n    const url = `${protocol}//${window.location.host}${appSettings.webRoot}/websocket/log`;\r\n    const config: WebSocketSubjectConfig<string> = {\r\n      url,\r\n      deserializer: (e: MessageEvent) => e.data as string,\r\n      serializer: (value: string) => value,\r\n    };\r\n    return webSocket(config);\r\n  }\r\n\r\n  private handleLogTailing(): void {\r\n    if (this.tailing && !this.tailingDisabled) {\r\n      // Subscribe on new logs once loaded (only for current logfile -> logNum = 0)\r\n      this.logWebsocket = this.createLogWebSocket(); // Need to create a new socket after unsubscribe\r\n      this.logWebsocket.subscribe(\r\n        (logMessage) => {\r\n          if (appSettings.logReversed) {\r\n            // Append to the top\r\n            this.logMessages.unshift(logMessage);\r\n            this.scrollService.triggerScrollUp();\r\n          } else {\r\n            // Append to the end\r\n            this.logMessages.push(logMessage);\r\n            this.scrollService.triggerScrollDown();\r\n          }\r\n        });\r\n      console.log('Log tailing enabled');\r\n    } else {\r\n      // Unsubscribe when not tailing\r\n      if (this.logWebsocket) {\r\n        this.logWebsocket.unsubscribe();\r\n      }\r\n      console.log('Log tailing disabled');\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"container-lg\">\r\n  <p-panel>\r\n    <!-- Custom panel header -->\r\n    <ng-template pTemplate=\"header\">\r\n      <div class=\"w-100\">\r\n        <div class=\"p-panel-title\">Logfile</div>\r\n        <div>\r\n          <span class=\"log-num\">\r\n            <span class=\"p-tag p-tag-rounded\" [ngClass]=\"{'p-tag-secondary': selectedLogNum !== 0}\" (click)=\"getLogs(0)\">current</span>\r\n            <span *ngFor=\"let logNum of logNums\" class=\"p-badge\" [ngClass]=\"{'p-badge-secondary': selectedLogNum !== logNum}\" (click)=\"getLogs(logNum)\">{{logNum}}</span>\r\n          </span>\r\n          <span class=\"log-tail\">\r\n            <p-button [label]=\"tailButtonLabel\" [icon]=\"tailButtonIcon\" styleClass=\"p-button-outlined\" [disabled]=\"tailingDisabled\" (onClick)=\"toggleTailing()\"></p-button>\r\n          </span>\r\n          <span class=\"log-level\">\r\n            <p-dropdown [options]=\"loglevels\" [(ngModel)]=\"selectedLoglevel\" styleClass=\"p-dropdown-ar\" scrollHeight=\"300px\"></p-dropdown>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n    <!-- Log content -->\r\n    <pre class=\"log-content\">{{logContent}}</pre>\r\n  </p-panel>\r\n</div>\r\n\r\n<!-- Loading component -->\r\n<app-loading [visible]=\"loading\"></app-loading>\r\n\r\n<!-- Scroll component -->\r\n<app-scroll></app-scroll>\r\n","export enum Loglevel {\r\n  DEBUG = 'DEBUG',\r\n  INFO = 'INFO',\r\n  WARNING = 'WARNING',\r\n  ERROR = 'ERROR',\r\n  CRITICAL = 'CRITICAL'\r\n}\r\n"],"names":["map","appSettings","ApiServiceTemplate","LogService","constructor","httpClient","webRoot","getLogs","lognum","url","URL","get","options","clearLogs","delete","pipe","getLogCount","count","i0","factory","providedIn","LogClearComponent","router","logService","messageService","ngOnInit","subscribe","result","navigateByUrl","showErrorMessage","selectors","decls","vars","template","styles","RouterModule","LogViewComponent","routes","path","redirectTo","pathMatch","component","LogRoutingModule","forChild","imports","exports","SharedModule","LogModule","declarations","webSocket","Loglevel","ctx_r3","ctx_r5","ctx_r7","ctx_r0","scrollService","loglevels","getLogLevels","logNums","Array","from","keys","i","logNum","loading","selectedLogNum","tailingDisabled","logLines","logMessages","handleLogTailing","toggleTailing","tailing","tailButtonLabel","tailButtonIcon","logReversed","triggerScrollUp","triggerScrollDown","filteredLogMessages","filter","logMessage","selectedLoglevel","match","LOG_MESSAGE_REGEX","exec","groups","loglevel","logContent","join","logLevels","push","label","value","Object","entries","forEach","entry","createLogWebSocket","protocol","window","location","host","config","deserializer","e","data","serializer","logWebsocket","unshift","console","log","unsubscribe","consts"],"sourceRoot":"webpack:///"}