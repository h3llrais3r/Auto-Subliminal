{"version":3,"file":"common.59069785d6171024.js","mappings":"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","sources":["./src/app/core/services/api/settings.service.ts","./src/app/shared/models/settings.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appSettings } from '../../../app-settings.service';\r\nimport { GeneralSettings, LibrarySettings, LogSettings, NameMappingSettings, NotificationSettings, PostProcessSettings, SkipMappingSettings, SubliminalSettings, TwitterAuthorization, TwitterRegistration, WebServerSettings } from '../../../shared/models/settings';\r\nimport { ApiServiceTemplate } from './api-service-template';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SettingsService extends ApiServiceTemplate {\r\n\r\n  private readonly URL = `${appSettings.webRoot}/api/settings`;\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    super(httpClient);\r\n  }\r\n\r\n  // General settings\r\n\r\n  getGeneralSettings(): Observable<GeneralSettings> {\r\n    return this.httpClient.get<GeneralSettings>(`${this.URL}/general`, this.options)\r\n      .pipe(map((settings) => new GeneralSettings(settings)));\r\n  }\r\n\r\n  updateGeneralSettings(generalSettings: GeneralSettings): Observable<boolean> {\r\n    return this.httpClient.put<GeneralSettings>(`${this.URL}/general`, JSON.stringify(generalSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  updateGeneralSetting(settingName: string, value: any): Observable<boolean> {\r\n    return this.httpClient.patch<void>(`${this.URL}/general/${settingName}`, JSON.stringify(value), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Library settings\r\n\r\n  getLibrarySettings(): Observable<LibrarySettings> {\r\n    return this.httpClient.get<LibrarySettings>(`${this.URL}/library`, this.options)\r\n      .pipe(map((settings) => new LibrarySettings(settings)));\r\n  }\r\n\r\n  updateLibrarySettings(librarySettings: LibrarySettings): Observable<boolean> {\r\n    return this.httpClient.put<LibrarySettings>(`${this.URL}/library`, JSON.stringify(librarySettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Log settings\r\n\r\n  getLogSettings(): Observable<LogSettings> {\r\n    return this.httpClient.get<LogSettings>(`${this.URL}/logging`, this.options)\r\n      .pipe(map((settings) => new LogSettings(settings)));\r\n  }\r\n\r\n  updateLogSettings(logSettings: LogSettings): Observable<boolean> {\r\n    return this.httpClient.put<LogSettings>(`${this.URL}/logging`, JSON.stringify(logSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // WebServer settings\r\n\r\n  getWebServerSettings(): Observable<WebServerSettings> {\r\n    return this.httpClient.get<WebServerSettings>(`${this.URL}/webserver`, this.options)\r\n      .pipe(map((settings) => new WebServerSettings(settings)));\r\n  }\r\n\r\n  updateWebServerSettings(webServerSettings: WebServerSettings): Observable<boolean> {\r\n    return this.httpClient.put<WebServerSettings>(`${this.URL}/webserver`, JSON.stringify(webServerSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Subliminal settings\r\n\r\n  getSubliminalSettings(): Observable<SubliminalSettings> {\r\n    return this.httpClient.get<SubliminalSettings>(`${this.URL}/subliminal`, this.options)\r\n      .pipe(map((settings) => new SubliminalSettings(settings)));\r\n  }\r\n\r\n  updateSubliminalSettings(subliminalSettings: SubliminalSettings): Observable<boolean> {\r\n    return this.httpClient.put<SubliminalSettings>(`${this.URL}/subliminal`, JSON.stringify(subliminalSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // NameMapping settings\r\n\r\n  getNameMappingSettings(): Observable<NameMappingSettings> {\r\n    return this.httpClient.get<NameMappingSettings>(`${this.URL}/namemapping`, this.options)\r\n      .pipe(map((settings) => new NameMappingSettings(settings)));\r\n  }\r\n\r\n  updateNameMappingSettings(nameMappingSettings: NameMappingSettings): Observable<boolean> {\r\n    return this.httpClient.put<NameMappingSettings>(`${this.URL}/namemapping`, JSON.stringify(nameMappingSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // SkipMapping settings\r\n\r\n  getSkipMappingSettings(): Observable<SkipMappingSettings> {\r\n    return this.httpClient.get<SkipMappingSettings>(`${this.URL}/skipmapping`, this.options)\r\n      .pipe(map((settings) => new SkipMappingSettings(settings)));\r\n  }\r\n\r\n  updateSkipMappingSettings(skipMappingSettings: SkipMappingSettings): Observable<boolean> {\r\n    return this.httpClient.put<SkipMappingSettings>(`${this.URL}/skipmapping`, JSON.stringify(skipMappingSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  // Notification settings\r\n\r\n  getNotificationSettings(): Observable<NotificationSettings> {\r\n    return this.httpClient.get<NotificationSettings>(`${this.URL}/notification`, this.options)\r\n      .pipe(map((settings) => new NotificationSettings(settings)));\r\n  }\r\n\r\n  updateNotificationSettings(notificationSettings: NotificationSettings): Observable<boolean> {\r\n    return this.httpClient.put<NotificationSettings>(`${this.URL}/notification`, JSON.stringify(notificationSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  testNotifier(notifierName: string): Observable<boolean> {\r\n    return this.httpClient.patch<void>(`${this.URL}/notification/${notifierName}`, {}, this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n\r\n  registerTwitter(): Observable<TwitterRegistration> {\r\n    return this.httpClient.post<TwitterRegistration>(`${this.URL}/notification/twitter`, {}, this.options)\r\n      .pipe(map((twitterRegistration) => new TwitterRegistration(twitterRegistration)));\r\n  }\r\n\r\n  authorizeTwitter(twitterRegistration: TwitterRegistration): Observable<TwitterAuthorization> {\r\n    return this.httpClient.post<any>(`${this.URL}/notification/twitter`, twitterRegistration, this.options)\r\n      .pipe(map((twitterAuthorization) => new TwitterAuthorization(twitterAuthorization)));\r\n  }\r\n\r\n  // PostProcess settings\r\n\r\n  getPostProcessSettings(): Observable<PostProcessSettings> {\r\n    return this.httpClient.get<PostProcessSettings>(`${this.URL}/postprocessing`, this.options)\r\n      .pipe(map((settings) => new PostProcessSettings(settings)));\r\n  }\r\n\r\n  updatePostProcessSettings(postProcessSettings: PostProcessSettings): Observable<boolean> {\r\n    return this.httpClient.put<PostProcessSettings>(`${this.URL}/postprocessing`, JSON.stringify(postProcessSettings), this.options)\r\n      .pipe(map(() => true));\r\n  }\r\n}\r\n","export class GeneralSettings {\r\n  videoPaths: string[];\r\n  defaultLanguage: string;\r\n  defaultLanguageSuffix: string;\r\n  additionalLanguages: string[];\r\n  manualSearchWithScoring: boolean;\r\n  scanDiskInterval: number;\r\n  checkSubInterval: number;\r\n  checkSubDeadline: number;\r\n  checkSubDelta: number;\r\n  checkVersionInterval: number;\r\n  checkVersionAutoUpdate: boolean;\r\n  scanEmbeddedSubs: boolean;\r\n  scanHardcodedSubs: boolean;\r\n  skipHiddenDirs: boolean;\r\n  detectInvalidSubLanguage: boolean;\r\n  detectedLanguageProbability: number;\r\n  manualSubSync: boolean;\r\n  ffmpegPath: string;\r\n  minVideoFileSize: number;\r\n  maxDbResults: number;\r\n  timestampFormat: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class LibrarySettings {\r\n  libraryMode: boolean;\r\n  libraryPaths: string[];\r\n  scanLibraryInterval: number;\r\n  libraryEditMode: boolean;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class LogSettings {\r\n  logFile: string;\r\n  logLevel: number;\r\n  logNum: number;\r\n  logSize: number;\r\n  logHttpAccess: boolean;\r\n  logExternalLibs: boolean;\r\n  logDetailedFormat: boolean;\r\n  logReversed: boolean;\r\n  logLevelConsole: number;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class WebServerSettings {\r\n  webServerIp: string;\r\n  webServerPort: number;\r\n  webRoot: string;\r\n  userName: string;\r\n  password: string;\r\n  launchBrowser: boolean;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class SubliminalSettings {\r\n  showMatchSource: boolean;\r\n  showMatchQuality: boolean;\r\n  showMatchCodec: boolean;\r\n  showMatchReleaseGroup: boolean;\r\n  movieMatchSource: boolean;\r\n  movieMatchQuality: boolean;\r\n  movieMatchCodec: boolean;\r\n  movieMatchReleaseGroup: boolean;\r\n  subliminalProviders: string[];\r\n  subtitleUtf8Encoding: boolean;\r\n  refineVideo: boolean;\r\n  manualRefineVideo: boolean;\r\n  preferHearingImpaired: boolean;\r\n  antiCaptchaClass: string;\r\n  antiCaptchaClientKey: string;\r\n  addic7edUserName: string;\r\n  addic7edPassword: string;\r\n  addic7edUserId: string;\r\n  opensubtitlesUserName: string;\r\n  opensubtitlesPassword: string;\r\n  legendastvUserName: string;\r\n  legendastvPassword: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class NameMappingSettings {\r\n  showNameMapping: string[];\r\n  addic7edShowNameMapping: string[];\r\n  alternativeShowNameMapping: string[];\r\n  movieNameMapping: string[];\r\n  alternativeMovieNameMapping: string[];\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class SkipMappingSettings {\r\n  skipShowMapping: string[];\r\n  skipMovieMapping: string[];\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class NotificationSettings {\r\n  notify: boolean;\r\n  notifyMail: boolean;\r\n  mailServer: string;\r\n  mailFrom: string;\r\n  mailTo: string;\r\n  mailUserName: string;\r\n  mailPassword: string;\r\n  mailSubject: string;\r\n  mailEncryption: string;\r\n  mailAuthentication: string;\r\n  notifyTwitter: boolean;\r\n  twitterKey: string;\r\n  twitterSecret: string;\r\n  notifyPushalot: boolean;\r\n  pushalotApi: string;\r\n  notifyPushover: boolean;\r\n  pushoverKey: string;\r\n  pushoverApi: string;\r\n  pushoverDevices: string;\r\n  notifyGrowl: boolean;\r\n  growlHost: string;\r\n  growlPort: number;\r\n  growlPassword: string;\r\n  growlPriority: number;\r\n  notifyProwl: boolean;\r\n  prowlApi: string;\r\n  prowlPriority: number;\r\n  notifyPushbullet: boolean;\r\n  pushbulletApi: string;\r\n  notifyTelegram: boolean;\r\n  telegramBotApi: string;\r\n  telegramChatId: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class TwitterRegistration {\r\n  url: string;\r\n  tokenKey: string;\r\n  tokenSecret: string;\r\n  tokenPin?: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class TwitterAuthorization {\r\n  twitterKey: string;\r\n  twitterSecret: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n\r\nexport class PostProcessSettings {\r\n  postProcess: boolean;\r\n  postProcessIndividual: boolean;\r\n  postProcessUtf8Encoding: boolean;\r\n  showPostProcessCmd: string;\r\n  showPostProcessArgs: string;\r\n  moviePostProcessCmd: string;\r\n  moviePostProcessArgs: string;\r\n\r\n  constructor(obj?: any) {\r\n    Object.assign(this, obj);\r\n  }\r\n}\r\n"],"names":["map","appSettings","GeneralSettings","LibrarySettings","LogSettings","NameMappingSettings","NotificationSettings","PostProcessSettings","SkipMappingSettings","SubliminalSettings","TwitterAuthorization","TwitterRegistration","WebServerSettings","ApiServiceTemplate","SettingsService","constructor","httpClient","webRoot","getGeneralSettings","get","URL","options","pipe","settings","updateGeneralSettings","generalSettings","put","JSON","stringify","updateGeneralSetting","settingName","value","patch","getLibrarySettings","updateLibrarySettings","librarySettings","getLogSettings","updateLogSettings","logSettings","getWebServerSettings","updateWebServerSettings","webServerSettings","getSubliminalSettings","updateSubliminalSettings","subliminalSettings","getNameMappingSettings","updateNameMappingSettings","nameMappingSettings","getSkipMappingSettings","updateSkipMappingSettings","skipMappingSettings","getNotificationSettings","updateNotificationSettings","notificationSettings","testNotifier","notifierName","registerTwitter","post","twitterRegistration","authorizeTwitter","twitterAuthorization","getPostProcessSettings","updatePostProcessSettings","postProcessSettings","i0","factory","providedIn","obj","Object","assign"],"sourceRoot":"webpack:///"}