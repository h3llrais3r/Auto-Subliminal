# coding: utf-8

"""
    TheTVDB API v2

    API v3 targets v2 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BasicEpisode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'absolute_number': 'int',
        'aired_episode_number': 'int',
        'aired_season': 'int',
        'dvd_episode_number': 'int',
        'dvd_season': 'int',
        'episode_name': 'str',
        'first_aired': 'str',
        'id': 'int',
        'language': 'EpisodeLanguageInfo',
        'last_updated': 'int',
        'overview': 'str'
    }

    attribute_map = {
        'absolute_number': 'absoluteNumber',
        'aired_episode_number': 'airedEpisodeNumber',
        'aired_season': 'airedSeason',
        'dvd_episode_number': 'dvdEpisodeNumber',
        'dvd_season': 'dvdSeason',
        'episode_name': 'episodeName',
        'first_aired': 'firstAired',
        'id': 'id',
        'language': 'language',
        'last_updated': 'lastUpdated',
        'overview': 'overview'
    }

    def __init__(self, absolute_number=None, aired_episode_number=None, aired_season=None, dvd_episode_number=None, dvd_season=None, episode_name=None, first_aired=None, id=None, language=None, last_updated=None, overview=None):  # noqa: E501
        """BasicEpisode - a model defined in Swagger"""  # noqa: E501

        self._absolute_number = None
        self._aired_episode_number = None
        self._aired_season = None
        self._dvd_episode_number = None
        self._dvd_season = None
        self._episode_name = None
        self._first_aired = None
        self._id = None
        self._language = None
        self._last_updated = None
        self._overview = None
        self.discriminator = None

        if absolute_number is not None:
            self.absolute_number = absolute_number
        if aired_episode_number is not None:
            self.aired_episode_number = aired_episode_number
        if aired_season is not None:
            self.aired_season = aired_season
        if dvd_episode_number is not None:
            self.dvd_episode_number = dvd_episode_number
        if dvd_season is not None:
            self.dvd_season = dvd_season
        if episode_name is not None:
            self.episode_name = episode_name
        if first_aired is not None:
            self.first_aired = first_aired
        if id is not None:
            self.id = id
        if language is not None:
            self.language = language
        if last_updated is not None:
            self.last_updated = last_updated
        if overview is not None:
            self.overview = overview

    @property
    def absolute_number(self):
        """Gets the absolute_number of this BasicEpisode.  # noqa: E501


        :return: The absolute_number of this BasicEpisode.  # noqa: E501
        :rtype: int
        """
        return self._absolute_number

    @absolute_number.setter
    def absolute_number(self, absolute_number):
        """Sets the absolute_number of this BasicEpisode.


        :param absolute_number: The absolute_number of this BasicEpisode.  # noqa: E501
        :type: int
        """

        self._absolute_number = absolute_number

    @property
    def aired_episode_number(self):
        """Gets the aired_episode_number of this BasicEpisode.  # noqa: E501


        :return: The aired_episode_number of this BasicEpisode.  # noqa: E501
        :rtype: int
        """
        return self._aired_episode_number

    @aired_episode_number.setter
    def aired_episode_number(self, aired_episode_number):
        """Sets the aired_episode_number of this BasicEpisode.


        :param aired_episode_number: The aired_episode_number of this BasicEpisode.  # noqa: E501
        :type: int
        """

        self._aired_episode_number = aired_episode_number

    @property
    def aired_season(self):
        """Gets the aired_season of this BasicEpisode.  # noqa: E501


        :return: The aired_season of this BasicEpisode.  # noqa: E501
        :rtype: int
        """
        return self._aired_season

    @aired_season.setter
    def aired_season(self, aired_season):
        """Sets the aired_season of this BasicEpisode.


        :param aired_season: The aired_season of this BasicEpisode.  # noqa: E501
        :type: int
        """

        self._aired_season = aired_season

    @property
    def dvd_episode_number(self):
        """Gets the dvd_episode_number of this BasicEpisode.  # noqa: E501


        :return: The dvd_episode_number of this BasicEpisode.  # noqa: E501
        :rtype: int
        """
        return self._dvd_episode_number

    @dvd_episode_number.setter
    def dvd_episode_number(self, dvd_episode_number):
        """Sets the dvd_episode_number of this BasicEpisode.


        :param dvd_episode_number: The dvd_episode_number of this BasicEpisode.  # noqa: E501
        :type: int
        """

        self._dvd_episode_number = dvd_episode_number

    @property
    def dvd_season(self):
        """Gets the dvd_season of this BasicEpisode.  # noqa: E501


        :return: The dvd_season of this BasicEpisode.  # noqa: E501
        :rtype: int
        """
        return self._dvd_season

    @dvd_season.setter
    def dvd_season(self, dvd_season):
        """Sets the dvd_season of this BasicEpisode.


        :param dvd_season: The dvd_season of this BasicEpisode.  # noqa: E501
        :type: int
        """

        self._dvd_season = dvd_season

    @property
    def episode_name(self):
        """Gets the episode_name of this BasicEpisode.  # noqa: E501


        :return: The episode_name of this BasicEpisode.  # noqa: E501
        :rtype: str
        """
        return self._episode_name

    @episode_name.setter
    def episode_name(self, episode_name):
        """Sets the episode_name of this BasicEpisode.


        :param episode_name: The episode_name of this BasicEpisode.  # noqa: E501
        :type: str
        """

        self._episode_name = episode_name

    @property
    def first_aired(self):
        """Gets the first_aired of this BasicEpisode.  # noqa: E501


        :return: The first_aired of this BasicEpisode.  # noqa: E501
        :rtype: str
        """
        return self._first_aired

    @first_aired.setter
    def first_aired(self, first_aired):
        """Sets the first_aired of this BasicEpisode.


        :param first_aired: The first_aired of this BasicEpisode.  # noqa: E501
        :type: str
        """

        self._first_aired = first_aired

    @property
    def id(self):
        """Gets the id of this BasicEpisode.  # noqa: E501


        :return: The id of this BasicEpisode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasicEpisode.


        :param id: The id of this BasicEpisode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this BasicEpisode.  # noqa: E501


        :return: The language of this BasicEpisode.  # noqa: E501
        :rtype: EpisodeLanguageInfo
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this BasicEpisode.


        :param language: The language of this BasicEpisode.  # noqa: E501
        :type: EpisodeLanguageInfo
        """

        self._language = language

    @property
    def last_updated(self):
        """Gets the last_updated of this BasicEpisode.  # noqa: E501


        :return: The last_updated of this BasicEpisode.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this BasicEpisode.


        :param last_updated: The last_updated of this BasicEpisode.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def overview(self):
        """Gets the overview of this BasicEpisode.  # noqa: E501


        :return: The overview of this BasicEpisode.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this BasicEpisode.


        :param overview: The overview of this BasicEpisode.  # noqa: E501
        :type: str
        """

        self._overview = overview

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicEpisode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicEpisode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
