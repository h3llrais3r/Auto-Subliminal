# coding: utf-8

"""
    TheTVDB API v2

    API v3 targets v2 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MovieRemoteId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'source_id': 'int',
        'source_name': 'str',
        'source_url': 'str',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'source_id': 'source_id',
        'source_name': 'source_name',
        'source_url': 'source_url',
        'url': 'url'
    }

    def __init__(self, id=None, source_id=None, source_name=None, source_url=None, url=None):  # noqa: E501
        """MovieRemoteId - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._source_id = None
        self._source_name = None
        self._source_url = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if source_id is not None:
            self.source_id = source_id
        if source_name is not None:
            self.source_name = source_name
        if source_url is not None:
            self.source_url = source_url
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this MovieRemoteId.  # noqa: E501


        :return: The id of this MovieRemoteId.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MovieRemoteId.


        :param id: The id of this MovieRemoteId.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source_id(self):
        """Gets the source_id of this MovieRemoteId.  # noqa: E501


        :return: The source_id of this MovieRemoteId.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this MovieRemoteId.


        :param source_id: The source_id of this MovieRemoteId.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def source_name(self):
        """Gets the source_name of this MovieRemoteId.  # noqa: E501


        :return: The source_name of this MovieRemoteId.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this MovieRemoteId.


        :param source_name: The source_name of this MovieRemoteId.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def source_url(self):
        """Gets the source_url of this MovieRemoteId.  # noqa: E501


        :return: The source_url of this MovieRemoteId.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this MovieRemoteId.


        :param source_url: The source_url of this MovieRemoteId.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def url(self):
        """Gets the url of this MovieRemoteId.  # noqa: E501


        :return: The url of this MovieRemoteId.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MovieRemoteId.


        :param url: The url of this MovieRemoteId.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MovieRemoteId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MovieRemoteId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
