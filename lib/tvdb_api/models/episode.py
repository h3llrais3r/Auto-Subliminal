# coding: utf-8

"""
    TheTVDB API v2

    API v3 targets v2 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Episode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'absolute_number': 'int',
        'aired_episode_number': 'int',
        'aired_season': 'int',
        'airs_after_season': 'int',
        'airs_before_episode': 'int',
        'airs_before_season': 'int',
        'director': 'str',
        'directors': 'list[str]',
        'dvd_chapter': 'float',
        'dvd_discid': 'str',
        'dvd_episode_number': 'float',
        'dvd_season': 'int',
        'episode_name': 'str',
        'filename': 'str',
        'first_aired': 'str',
        'guest_stars': 'list[str]',
        'id': 'int',
        'imdb_id': 'str',
        'last_updated': 'int',
        'last_updated_by': 'str',
        'overview': 'str',
        'production_code': 'str',
        'series_id': 'str',
        'show_url': 'str',
        'site_rating': 'float',
        'site_rating_count': 'int',
        'thumb_added': 'str',
        'thumb_author': 'int',
        'thumb_height': 'str',
        'thumb_width': 'str',
        'writers': 'list[str]'
    }

    attribute_map = {
        'absolute_number': 'absoluteNumber',
        'aired_episode_number': 'airedEpisodeNumber',
        'aired_season': 'airedSeason',
        'airs_after_season': 'airsAfterSeason',
        'airs_before_episode': 'airsBeforeEpisode',
        'airs_before_season': 'airsBeforeSeason',
        'director': 'director',
        'directors': 'directors',
        'dvd_chapter': 'dvdChapter',
        'dvd_discid': 'dvdDiscid',
        'dvd_episode_number': 'dvdEpisodeNumber',
        'dvd_season': 'dvdSeason',
        'episode_name': 'episodeName',
        'filename': 'filename',
        'first_aired': 'firstAired',
        'guest_stars': 'guestStars',
        'id': 'id',
        'imdb_id': 'imdbId',
        'last_updated': 'lastUpdated',
        'last_updated_by': 'lastUpdatedBy',
        'overview': 'overview',
        'production_code': 'productionCode',
        'series_id': 'seriesId',
        'show_url': 'showUrl',
        'site_rating': 'siteRating',
        'site_rating_count': 'siteRatingCount',
        'thumb_added': 'thumbAdded',
        'thumb_author': 'thumbAuthor',
        'thumb_height': 'thumbHeight',
        'thumb_width': 'thumbWidth',
        'writers': 'writers'
    }

    def __init__(self, absolute_number=None, aired_episode_number=None, aired_season=None, airs_after_season=None, airs_before_episode=None, airs_before_season=None, director=None, directors=None, dvd_chapter=None, dvd_discid=None, dvd_episode_number=None, dvd_season=None, episode_name=None, filename=None, first_aired=None, guest_stars=None, id=None, imdb_id=None, last_updated=None, last_updated_by=None, overview=None, production_code=None, series_id=None, show_url=None, site_rating=None, site_rating_count=None, thumb_added=None, thumb_author=None, thumb_height=None, thumb_width=None, writers=None):  # noqa: E501
        """Episode - a model defined in Swagger"""  # noqa: E501

        self._absolute_number = None
        self._aired_episode_number = None
        self._aired_season = None
        self._airs_after_season = None
        self._airs_before_episode = None
        self._airs_before_season = None
        self._director = None
        self._directors = None
        self._dvd_chapter = None
        self._dvd_discid = None
        self._dvd_episode_number = None
        self._dvd_season = None
        self._episode_name = None
        self._filename = None
        self._first_aired = None
        self._guest_stars = None
        self._id = None
        self._imdb_id = None
        self._last_updated = None
        self._last_updated_by = None
        self._overview = None
        self._production_code = None
        self._series_id = None
        self._show_url = None
        self._site_rating = None
        self._site_rating_count = None
        self._thumb_added = None
        self._thumb_author = None
        self._thumb_height = None
        self._thumb_width = None
        self._writers = None
        self.discriminator = None

        if absolute_number is not None:
            self.absolute_number = absolute_number
        if aired_episode_number is not None:
            self.aired_episode_number = aired_episode_number
        if aired_season is not None:
            self.aired_season = aired_season
        if airs_after_season is not None:
            self.airs_after_season = airs_after_season
        if airs_before_episode is not None:
            self.airs_before_episode = airs_before_episode
        if airs_before_season is not None:
            self.airs_before_season = airs_before_season
        if director is not None:
            self.director = director
        if directors is not None:
            self.directors = directors
        if dvd_chapter is not None:
            self.dvd_chapter = dvd_chapter
        if dvd_discid is not None:
            self.dvd_discid = dvd_discid
        if dvd_episode_number is not None:
            self.dvd_episode_number = dvd_episode_number
        if dvd_season is not None:
            self.dvd_season = dvd_season
        if episode_name is not None:
            self.episode_name = episode_name
        if filename is not None:
            self.filename = filename
        if first_aired is not None:
            self.first_aired = first_aired
        if guest_stars is not None:
            self.guest_stars = guest_stars
        if id is not None:
            self.id = id
        if imdb_id is not None:
            self.imdb_id = imdb_id
        if last_updated is not None:
            self.last_updated = last_updated
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if overview is not None:
            self.overview = overview
        if production_code is not None:
            self.production_code = production_code
        if series_id is not None:
            self.series_id = series_id
        if show_url is not None:
            self.show_url = show_url
        if site_rating is not None:
            self.site_rating = site_rating
        if site_rating_count is not None:
            self.site_rating_count = site_rating_count
        if thumb_added is not None:
            self.thumb_added = thumb_added
        if thumb_author is not None:
            self.thumb_author = thumb_author
        if thumb_height is not None:
            self.thumb_height = thumb_height
        if thumb_width is not None:
            self.thumb_width = thumb_width
        if writers is not None:
            self.writers = writers

    @property
    def absolute_number(self):
        """Gets the absolute_number of this Episode.  # noqa: E501


        :return: The absolute_number of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._absolute_number

    @absolute_number.setter
    def absolute_number(self, absolute_number):
        """Sets the absolute_number of this Episode.


        :param absolute_number: The absolute_number of this Episode.  # noqa: E501
        :type: int
        """

        self._absolute_number = absolute_number

    @property
    def aired_episode_number(self):
        """Gets the aired_episode_number of this Episode.  # noqa: E501


        :return: The aired_episode_number of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._aired_episode_number

    @aired_episode_number.setter
    def aired_episode_number(self, aired_episode_number):
        """Sets the aired_episode_number of this Episode.


        :param aired_episode_number: The aired_episode_number of this Episode.  # noqa: E501
        :type: int
        """

        self._aired_episode_number = aired_episode_number

    @property
    def aired_season(self):
        """Gets the aired_season of this Episode.  # noqa: E501


        :return: The aired_season of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._aired_season

    @aired_season.setter
    def aired_season(self, aired_season):
        """Sets the aired_season of this Episode.


        :param aired_season: The aired_season of this Episode.  # noqa: E501
        :type: int
        """

        self._aired_season = aired_season

    @property
    def airs_after_season(self):
        """Gets the airs_after_season of this Episode.  # noqa: E501


        :return: The airs_after_season of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._airs_after_season

    @airs_after_season.setter
    def airs_after_season(self, airs_after_season):
        """Sets the airs_after_season of this Episode.


        :param airs_after_season: The airs_after_season of this Episode.  # noqa: E501
        :type: int
        """

        self._airs_after_season = airs_after_season

    @property
    def airs_before_episode(self):
        """Gets the airs_before_episode of this Episode.  # noqa: E501


        :return: The airs_before_episode of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._airs_before_episode

    @airs_before_episode.setter
    def airs_before_episode(self, airs_before_episode):
        """Sets the airs_before_episode of this Episode.


        :param airs_before_episode: The airs_before_episode of this Episode.  # noqa: E501
        :type: int
        """

        self._airs_before_episode = airs_before_episode

    @property
    def airs_before_season(self):
        """Gets the airs_before_season of this Episode.  # noqa: E501


        :return: The airs_before_season of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._airs_before_season

    @airs_before_season.setter
    def airs_before_season(self, airs_before_season):
        """Sets the airs_before_season of this Episode.


        :param airs_before_season: The airs_before_season of this Episode.  # noqa: E501
        :type: int
        """

        self._airs_before_season = airs_before_season

    @property
    def director(self):
        """Gets the director of this Episode.  # noqa: E501


        :return: The director of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this Episode.


        :param director: The director of this Episode.  # noqa: E501
        :type: str
        """

        self._director = director

    @property
    def directors(self):
        """Gets the directors of this Episode.  # noqa: E501


        :return: The directors of this Episode.  # noqa: E501
        :rtype: list[str]
        """
        return self._directors

    @directors.setter
    def directors(self, directors):
        """Sets the directors of this Episode.


        :param directors: The directors of this Episode.  # noqa: E501
        :type: list[str]
        """

        self._directors = directors

    @property
    def dvd_chapter(self):
        """Gets the dvd_chapter of this Episode.  # noqa: E501


        :return: The dvd_chapter of this Episode.  # noqa: E501
        :rtype: float
        """
        return self._dvd_chapter

    @dvd_chapter.setter
    def dvd_chapter(self, dvd_chapter):
        """Sets the dvd_chapter of this Episode.


        :param dvd_chapter: The dvd_chapter of this Episode.  # noqa: E501
        :type: float
        """

        self._dvd_chapter = dvd_chapter

    @property
    def dvd_discid(self):
        """Gets the dvd_discid of this Episode.  # noqa: E501


        :return: The dvd_discid of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._dvd_discid

    @dvd_discid.setter
    def dvd_discid(self, dvd_discid):
        """Sets the dvd_discid of this Episode.


        :param dvd_discid: The dvd_discid of this Episode.  # noqa: E501
        :type: str
        """

        self._dvd_discid = dvd_discid

    @property
    def dvd_episode_number(self):
        """Gets the dvd_episode_number of this Episode.  # noqa: E501


        :return: The dvd_episode_number of this Episode.  # noqa: E501
        :rtype: float
        """
        return self._dvd_episode_number

    @dvd_episode_number.setter
    def dvd_episode_number(self, dvd_episode_number):
        """Sets the dvd_episode_number of this Episode.


        :param dvd_episode_number: The dvd_episode_number of this Episode.  # noqa: E501
        :type: float
        """

        self._dvd_episode_number = dvd_episode_number

    @property
    def dvd_season(self):
        """Gets the dvd_season of this Episode.  # noqa: E501


        :return: The dvd_season of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._dvd_season

    @dvd_season.setter
    def dvd_season(self, dvd_season):
        """Sets the dvd_season of this Episode.


        :param dvd_season: The dvd_season of this Episode.  # noqa: E501
        :type: int
        """

        self._dvd_season = dvd_season

    @property
    def episode_name(self):
        """Gets the episode_name of this Episode.  # noqa: E501


        :return: The episode_name of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._episode_name

    @episode_name.setter
    def episode_name(self, episode_name):
        """Sets the episode_name of this Episode.


        :param episode_name: The episode_name of this Episode.  # noqa: E501
        :type: str
        """

        self._episode_name = episode_name

    @property
    def filename(self):
        """Gets the filename of this Episode.  # noqa: E501


        :return: The filename of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Episode.


        :param filename: The filename of this Episode.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def first_aired(self):
        """Gets the first_aired of this Episode.  # noqa: E501


        :return: The first_aired of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._first_aired

    @first_aired.setter
    def first_aired(self, first_aired):
        """Sets the first_aired of this Episode.


        :param first_aired: The first_aired of this Episode.  # noqa: E501
        :type: str
        """

        self._first_aired = first_aired

    @property
    def guest_stars(self):
        """Gets the guest_stars of this Episode.  # noqa: E501


        :return: The guest_stars of this Episode.  # noqa: E501
        :rtype: list[str]
        """
        return self._guest_stars

    @guest_stars.setter
    def guest_stars(self, guest_stars):
        """Sets the guest_stars of this Episode.


        :param guest_stars: The guest_stars of this Episode.  # noqa: E501
        :type: list[str]
        """

        self._guest_stars = guest_stars

    @property
    def id(self):
        """Gets the id of this Episode.  # noqa: E501


        :return: The id of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Episode.


        :param id: The id of this Episode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def imdb_id(self):
        """Gets the imdb_id of this Episode.  # noqa: E501


        :return: The imdb_id of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._imdb_id

    @imdb_id.setter
    def imdb_id(self, imdb_id):
        """Sets the imdb_id of this Episode.


        :param imdb_id: The imdb_id of this Episode.  # noqa: E501
        :type: str
        """

        self._imdb_id = imdb_id

    @property
    def last_updated(self):
        """Gets the last_updated of this Episode.  # noqa: E501


        :return: The last_updated of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Episode.


        :param last_updated: The last_updated of this Episode.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this Episode.  # noqa: E501


        :return: The last_updated_by of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this Episode.


        :param last_updated_by: The last_updated_by of this Episode.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def overview(self):
        """Gets the overview of this Episode.  # noqa: E501


        :return: The overview of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this Episode.


        :param overview: The overview of this Episode.  # noqa: E501
        :type: str
        """

        self._overview = overview

    @property
    def production_code(self):
        """Gets the production_code of this Episode.  # noqa: E501


        :return: The production_code of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._production_code

    @production_code.setter
    def production_code(self, production_code):
        """Sets the production_code of this Episode.


        :param production_code: The production_code of this Episode.  # noqa: E501
        :type: str
        """

        self._production_code = production_code

    @property
    def series_id(self):
        """Gets the series_id of this Episode.  # noqa: E501


        :return: The series_id of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this Episode.


        :param series_id: The series_id of this Episode.  # noqa: E501
        :type: str
        """

        self._series_id = series_id

    @property
    def show_url(self):
        """Gets the show_url of this Episode.  # noqa: E501


        :return: The show_url of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._show_url

    @show_url.setter
    def show_url(self, show_url):
        """Sets the show_url of this Episode.


        :param show_url: The show_url of this Episode.  # noqa: E501
        :type: str
        """

        self._show_url = show_url

    @property
    def site_rating(self):
        """Gets the site_rating of this Episode.  # noqa: E501


        :return: The site_rating of this Episode.  # noqa: E501
        :rtype: float
        """
        return self._site_rating

    @site_rating.setter
    def site_rating(self, site_rating):
        """Sets the site_rating of this Episode.


        :param site_rating: The site_rating of this Episode.  # noqa: E501
        :type: float
        """

        self._site_rating = site_rating

    @property
    def site_rating_count(self):
        """Gets the site_rating_count of this Episode.  # noqa: E501


        :return: The site_rating_count of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._site_rating_count

    @site_rating_count.setter
    def site_rating_count(self, site_rating_count):
        """Sets the site_rating_count of this Episode.


        :param site_rating_count: The site_rating_count of this Episode.  # noqa: E501
        :type: int
        """

        self._site_rating_count = site_rating_count

    @property
    def thumb_added(self):
        """Gets the thumb_added of this Episode.  # noqa: E501


        :return: The thumb_added of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._thumb_added

    @thumb_added.setter
    def thumb_added(self, thumb_added):
        """Sets the thumb_added of this Episode.


        :param thumb_added: The thumb_added of this Episode.  # noqa: E501
        :type: str
        """

        self._thumb_added = thumb_added

    @property
    def thumb_author(self):
        """Gets the thumb_author of this Episode.  # noqa: E501


        :return: The thumb_author of this Episode.  # noqa: E501
        :rtype: int
        """
        return self._thumb_author

    @thumb_author.setter
    def thumb_author(self, thumb_author):
        """Sets the thumb_author of this Episode.


        :param thumb_author: The thumb_author of this Episode.  # noqa: E501
        :type: int
        """

        self._thumb_author = thumb_author

    @property
    def thumb_height(self):
        """Gets the thumb_height of this Episode.  # noqa: E501


        :return: The thumb_height of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._thumb_height

    @thumb_height.setter
    def thumb_height(self, thumb_height):
        """Sets the thumb_height of this Episode.


        :param thumb_height: The thumb_height of this Episode.  # noqa: E501
        :type: str
        """

        self._thumb_height = thumb_height

    @property
    def thumb_width(self):
        """Gets the thumb_width of this Episode.  # noqa: E501


        :return: The thumb_width of this Episode.  # noqa: E501
        :rtype: str
        """
        return self._thumb_width

    @thumb_width.setter
    def thumb_width(self, thumb_width):
        """Sets the thumb_width of this Episode.


        :param thumb_width: The thumb_width of this Episode.  # noqa: E501
        :type: str
        """

        self._thumb_width = thumb_width

    @property
    def writers(self):
        """Gets the writers of this Episode.  # noqa: E501


        :return: The writers of this Episode.  # noqa: E501
        :rtype: list[str]
        """
        return self._writers

    @writers.setter
    def writers(self, writers):
        """Sets the writers of this Episode.


        :param writers: The writers of this Episode.  # noqa: E501
        :type: list[str]
        """

        self._writers = writers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Episode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Episode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
