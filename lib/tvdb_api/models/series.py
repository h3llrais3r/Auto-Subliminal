# coding: utf-8

"""
    TheTVDB API v2

    API v3 targets v2 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Series(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added': 'str',
        'airs_day_of_week': 'str',
        'airs_time': 'str',
        'aliases': 'list[str]',
        'banner': 'str',
        'first_aired': 'str',
        'genre': 'list[str]',
        'id': 'int',
        'imdb_id': 'str',
        'last_updated': 'int',
        'network': 'str',
        'network_id': 'str',
        'overview': 'str',
        'rating': 'str',
        'runtime': 'str',
        'series_id': 'str',
        'series_name': 'str',
        'site_rating': 'float',
        'site_rating_count': 'int',
        'slug': 'str',
        'status': 'str',
        'zap2it_id': 'str'
    }

    attribute_map = {
        'added': 'added',
        'airs_day_of_week': 'airsDayOfWeek',
        'airs_time': 'airsTime',
        'aliases': 'aliases',
        'banner': 'banner',
        'first_aired': 'firstAired',
        'genre': 'genre',
        'id': 'id',
        'imdb_id': 'imdbId',
        'last_updated': 'lastUpdated',
        'network': 'network',
        'network_id': 'networkId',
        'overview': 'overview',
        'rating': 'rating',
        'runtime': 'runtime',
        'series_id': 'seriesId',
        'series_name': 'seriesName',
        'site_rating': 'siteRating',
        'site_rating_count': 'siteRatingCount',
        'slug': 'slug',
        'status': 'status',
        'zap2it_id': 'zap2itId'
    }

    def __init__(self, added=None, airs_day_of_week=None, airs_time=None, aliases=None, banner=None, first_aired=None, genre=None, id=None, imdb_id=None, last_updated=None, network=None, network_id=None, overview=None, rating=None, runtime=None, series_id=None, series_name=None, site_rating=None, site_rating_count=None, slug=None, status=None, zap2it_id=None):  # noqa: E501
        """Series - a model defined in Swagger"""  # noqa: E501

        self._added = None
        self._airs_day_of_week = None
        self._airs_time = None
        self._aliases = None
        self._banner = None
        self._first_aired = None
        self._genre = None
        self._id = None
        self._imdb_id = None
        self._last_updated = None
        self._network = None
        self._network_id = None
        self._overview = None
        self._rating = None
        self._runtime = None
        self._series_id = None
        self._series_name = None
        self._site_rating = None
        self._site_rating_count = None
        self._slug = None
        self._status = None
        self._zap2it_id = None
        self.discriminator = None

        if added is not None:
            self.added = added
        if airs_day_of_week is not None:
            self.airs_day_of_week = airs_day_of_week
        if airs_time is not None:
            self.airs_time = airs_time
        if aliases is not None:
            self.aliases = aliases
        if banner is not None:
            self.banner = banner
        if first_aired is not None:
            self.first_aired = first_aired
        if genre is not None:
            self.genre = genre
        if id is not None:
            self.id = id
        if imdb_id is not None:
            self.imdb_id = imdb_id
        if last_updated is not None:
            self.last_updated = last_updated
        if network is not None:
            self.network = network
        if network_id is not None:
            self.network_id = network_id
        if overview is not None:
            self.overview = overview
        if rating is not None:
            self.rating = rating
        if runtime is not None:
            self.runtime = runtime
        if series_id is not None:
            self.series_id = series_id
        if series_name is not None:
            self.series_name = series_name
        if site_rating is not None:
            self.site_rating = site_rating
        if site_rating_count is not None:
            self.site_rating_count = site_rating_count
        if slug is not None:
            self.slug = slug
        if status is not None:
            self.status = status
        if zap2it_id is not None:
            self.zap2it_id = zap2it_id

    @property
    def added(self):
        """Gets the added of this Series.  # noqa: E501


        :return: The added of this Series.  # noqa: E501
        :rtype: str
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this Series.


        :param added: The added of this Series.  # noqa: E501
        :type: str
        """

        self._added = added

    @property
    def airs_day_of_week(self):
        """Gets the airs_day_of_week of this Series.  # noqa: E501


        :return: The airs_day_of_week of this Series.  # noqa: E501
        :rtype: str
        """
        return self._airs_day_of_week

    @airs_day_of_week.setter
    def airs_day_of_week(self, airs_day_of_week):
        """Sets the airs_day_of_week of this Series.


        :param airs_day_of_week: The airs_day_of_week of this Series.  # noqa: E501
        :type: str
        """

        self._airs_day_of_week = airs_day_of_week

    @property
    def airs_time(self):
        """Gets the airs_time of this Series.  # noqa: E501


        :return: The airs_time of this Series.  # noqa: E501
        :rtype: str
        """
        return self._airs_time

    @airs_time.setter
    def airs_time(self, airs_time):
        """Sets the airs_time of this Series.


        :param airs_time: The airs_time of this Series.  # noqa: E501
        :type: str
        """

        self._airs_time = airs_time

    @property
    def aliases(self):
        """Gets the aliases of this Series.  # noqa: E501


        :return: The aliases of this Series.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Series.


        :param aliases: The aliases of this Series.  # noqa: E501
        :type: list[str]
        """

        self._aliases = aliases

    @property
    def banner(self):
        """Gets the banner of this Series.  # noqa: E501


        :return: The banner of this Series.  # noqa: E501
        :rtype: str
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """Sets the banner of this Series.


        :param banner: The banner of this Series.  # noqa: E501
        :type: str
        """

        self._banner = banner

    @property
    def first_aired(self):
        """Gets the first_aired of this Series.  # noqa: E501


        :return: The first_aired of this Series.  # noqa: E501
        :rtype: str
        """
        return self._first_aired

    @first_aired.setter
    def first_aired(self, first_aired):
        """Sets the first_aired of this Series.


        :param first_aired: The first_aired of this Series.  # noqa: E501
        :type: str
        """

        self._first_aired = first_aired

    @property
    def genre(self):
        """Gets the genre of this Series.  # noqa: E501


        :return: The genre of this Series.  # noqa: E501
        :rtype: list[str]
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this Series.


        :param genre: The genre of this Series.  # noqa: E501
        :type: list[str]
        """

        self._genre = genre

    @property
    def id(self):
        """Gets the id of this Series.  # noqa: E501


        :return: The id of this Series.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Series.


        :param id: The id of this Series.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def imdb_id(self):
        """Gets the imdb_id of this Series.  # noqa: E501


        :return: The imdb_id of this Series.  # noqa: E501
        :rtype: str
        """
        return self._imdb_id

    @imdb_id.setter
    def imdb_id(self, imdb_id):
        """Sets the imdb_id of this Series.


        :param imdb_id: The imdb_id of this Series.  # noqa: E501
        :type: str
        """

        self._imdb_id = imdb_id

    @property
    def last_updated(self):
        """Gets the last_updated of this Series.  # noqa: E501


        :return: The last_updated of this Series.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Series.


        :param last_updated: The last_updated of this Series.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def network(self):
        """Gets the network of this Series.  # noqa: E501


        :return: The network of this Series.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Series.


        :param network: The network of this Series.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def network_id(self):
        """Gets the network_id of this Series.  # noqa: E501


        :return: The network_id of this Series.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this Series.


        :param network_id: The network_id of this Series.  # noqa: E501
        :type: str
        """

        self._network_id = network_id

    @property
    def overview(self):
        """Gets the overview of this Series.  # noqa: E501


        :return: The overview of this Series.  # noqa: E501
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this Series.


        :param overview: The overview of this Series.  # noqa: E501
        :type: str
        """

        self._overview = overview

    @property
    def rating(self):
        """Gets the rating of this Series.  # noqa: E501


        :return: The rating of this Series.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Series.


        :param rating: The rating of this Series.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def runtime(self):
        """Gets the runtime of this Series.  # noqa: E501


        :return: The runtime of this Series.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this Series.


        :param runtime: The runtime of this Series.  # noqa: E501
        :type: str
        """

        self._runtime = runtime

    @property
    def series_id(self):
        """Gets the series_id of this Series.  # noqa: E501


        :return: The series_id of this Series.  # noqa: E501
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id):
        """Sets the series_id of this Series.


        :param series_id: The series_id of this Series.  # noqa: E501
        :type: str
        """

        self._series_id = series_id

    @property
    def series_name(self):
        """Gets the series_name of this Series.  # noqa: E501


        :return: The series_name of this Series.  # noqa: E501
        :rtype: str
        """
        return self._series_name

    @series_name.setter
    def series_name(self, series_name):
        """Sets the series_name of this Series.


        :param series_name: The series_name of this Series.  # noqa: E501
        :type: str
        """

        self._series_name = series_name

    @property
    def site_rating(self):
        """Gets the site_rating of this Series.  # noqa: E501


        :return: The site_rating of this Series.  # noqa: E501
        :rtype: float
        """
        return self._site_rating

    @site_rating.setter
    def site_rating(self, site_rating):
        """Sets the site_rating of this Series.


        :param site_rating: The site_rating of this Series.  # noqa: E501
        :type: float
        """

        self._site_rating = site_rating

    @property
    def site_rating_count(self):
        """Gets the site_rating_count of this Series.  # noqa: E501


        :return: The site_rating_count of this Series.  # noqa: E501
        :rtype: int
        """
        return self._site_rating_count

    @site_rating_count.setter
    def site_rating_count(self, site_rating_count):
        """Sets the site_rating_count of this Series.


        :param site_rating_count: The site_rating_count of this Series.  # noqa: E501
        :type: int
        """

        self._site_rating_count = site_rating_count

    @property
    def slug(self):
        """Gets the slug of this Series.  # noqa: E501


        :return: The slug of this Series.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Series.


        :param slug: The slug of this Series.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this Series.  # noqa: E501


        :return: The status of this Series.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Series.


        :param status: The status of this Series.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def zap2it_id(self):
        """Gets the zap2it_id of this Series.  # noqa: E501


        :return: The zap2it_id of this Series.  # noqa: E501
        :rtype: str
        """
        return self._zap2it_id

    @zap2it_id.setter
    def zap2it_id(self, zap2it_id):
        """Sets the zap2it_id of this Series.


        :param zap2it_id: The zap2it_id of this Series.  # noqa: E501
        :type: str
        """

        self._zap2it_id = zap2it_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Series, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Series):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
