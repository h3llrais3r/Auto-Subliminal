# coding: utf-8

"""
    TheTVDB API v2

    API v3 targets v2 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SeriesImagesQueryParam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_type': 'str',
        'language_id': 'str',
        'resolution': 'list[str]',
        'sub_key': 'list[str]'
    }

    attribute_map = {
        'key_type': 'keyType',
        'language_id': 'languageId',
        'resolution': 'resolution',
        'sub_key': 'subKey'
    }

    def __init__(self, key_type=None, language_id=None, resolution=None, sub_key=None):  # noqa: E501
        """SeriesImagesQueryParam - a model defined in Swagger"""  # noqa: E501

        self._key_type = None
        self._language_id = None
        self._resolution = None
        self._sub_key = None
        self.discriminator = None

        if key_type is not None:
            self.key_type = key_type
        if language_id is not None:
            self.language_id = language_id
        if resolution is not None:
            self.resolution = resolution
        if sub_key is not None:
            self.sub_key = sub_key

    @property
    def key_type(self):
        """Gets the key_type of this SeriesImagesQueryParam.  # noqa: E501


        :return: The key_type of this SeriesImagesQueryParam.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this SeriesImagesQueryParam.


        :param key_type: The key_type of this SeriesImagesQueryParam.  # noqa: E501
        :type: str
        """

        self._key_type = key_type

    @property
    def language_id(self):
        """Gets the language_id of this SeriesImagesQueryParam.  # noqa: E501


        :return: The language_id of this SeriesImagesQueryParam.  # noqa: E501
        :rtype: str
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this SeriesImagesQueryParam.


        :param language_id: The language_id of this SeriesImagesQueryParam.  # noqa: E501
        :type: str
        """

        self._language_id = language_id

    @property
    def resolution(self):
        """Gets the resolution of this SeriesImagesQueryParam.  # noqa: E501


        :return: The resolution of this SeriesImagesQueryParam.  # noqa: E501
        :rtype: list[str]
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this SeriesImagesQueryParam.


        :param resolution: The resolution of this SeriesImagesQueryParam.  # noqa: E501
        :type: list[str]
        """

        self._resolution = resolution

    @property
    def sub_key(self):
        """Gets the sub_key of this SeriesImagesQueryParam.  # noqa: E501


        :return: The sub_key of this SeriesImagesQueryParam.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_key

    @sub_key.setter
    def sub_key(self, sub_key):
        """Sets the sub_key of this SeriesImagesQueryParam.


        :param sub_key: The sub_key of this SeriesImagesQueryParam.  # noqa: E501
        :type: list[str]
        """

        self._sub_key = sub_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SeriesImagesQueryParam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SeriesImagesQueryParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
